@page "/login"
@inject IJSRuntime Js


<PageTitle>Login</PageTitle>

<h1>Login</h1>

<br/>

<div class="container">
    <h3>Email</h3>
    <input type="text" @bind="userEmail" class="form-control" autofocus required />

    <h3>Password</h3>
    <input type="text" @bind="userPassword" class="form-control" required />
    
    <br/>
    <br/>
    <button
        type="button"
        class="btn btn-primary"
        @onclick="AttemptLogin">
        Login
    </button>
</div>

<script>
    window.setCookie = (name, value) => {
        const d = new Date();
        d.setTime(d.getTime() + (24 * 60 * 60 * 1000)); 
        let expires = "expires=" + d.toUTCString();
        document.cookie = name + "=" + value + ";" + expires + ";path=/"; 
    };
</script>

@code {
    
    private string userEmail;
    private string userPassword;
    
    [Inject] NavigationManager Navigation { get; set; }
    
    // Set cookie if auth'd
    public async Task AttemptLogin()
    {
        if (User.IsAuthenticated(userEmail, userPassword))
        {
            var role = User.getRoleByAuthenticatedUser(userEmail);
            // Console.WriteLine("USER IS AUTHENTICATED");
            await sendCookie("access_token", userEmail);
            await sendCookie("access_role", $"{role}");
        }
        // Console.WriteLine("NOT AUTHENTICATED");
        BackHome();
    }
    
    private async Task sendCookie(string name, string value)
    {
        await Js.InvokeVoidAsync("setCookie", name, value);
    }

    public async Task updateforDom(string name)
    {
        await Js.InvokeVoidAsync(name);
    }
    
    // redirect
    public void BackHome()
    {
        Navigation.NavigateTo("/", true);
    }
}